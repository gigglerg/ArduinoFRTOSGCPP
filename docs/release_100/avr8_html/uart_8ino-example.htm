<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoFRTOSGCPP: uart.ino</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoFRTOSGCPP
   &#160;<span id="projectnumber">d91a63f (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('uart_8ino-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">uart.ino</div>  </div>
</div><!--header-->
<div class="contents">
<p>file pin_isr.ino</p>
<div class="fragment"><div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Example use of FRTOSGCPP library - Associate a Arduino UART with 2 tasks and queues for RX and TX, then classes implementing </span></div>
<div class="line"><span class="comment"> * observer pattern, listening for and accepting specific messaging.  When accepted the message is passed to TX UART </span></div>
<div class="line"><span class="comment"> * queue for transmit.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Architecture support:</span></div>
<div class="line"><span class="comment"> *  AVR8 (Uno/Nano)</span></div>
<div class="line"><span class="comment"> *  AT91 (Due)</span></div>
<div class="line"><span class="comment"> *  STM32 (F103.  Blue pill/Maple mini)</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * DG, 2019</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;limits.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include FRTOS</span></div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_SAM_DUE)</span></div>
<div class="line"><span class="comment">// Due FRTOS (ARM7)</span></div>
<div class="line"><span class="preprocessor">#include &lt;FreeRTOS_ARM.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Macro to include Ardunio Due FRTOS specifics</span></div>
<div class="line"><span class="comment">//#define FRTOS_SAM_CONTROL</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define HW_UART      Serial1</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Maple Mini FRTOS (Cortex M3)</span></div>
<div class="line"><span class="preprocessor">#include &lt;MapleFreeRTOS900.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define HW_UART      Serial1</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// AVR8 (UNO/Nano etc.)</span></div>
<div class="line"><span class="preprocessor">#include &lt;FreeRTOS_AVR.h&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define HW_UART      Serial</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor">#error Unsupported core</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">// Macro to stop issuing using on all FTROSGCPP namespaces.  If defined, you specify</span></div>
<div class="line"><span class="comment">//#define FTROS_GCPP_NONS</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="frtosgcpp_8h.htm">frtosgcpp.h</a>&gt;</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * A class to monitor a UART receive queue, accepting data on when specific text received.  Forwards message to TX UART queue</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \tparam lineLengthN Text line maximum length (characters, including NULL)</span></div>
<div class="line"><span class="comment"> * \tparam msgLen Message maximum length (characters, including NULL)</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">template</span> &lt;u<span class="keywordtype">int</span>32_t lineLengthN, u<span class="keywordtype">int</span>32_t msgLen&gt;</div>
<div class="line"><span class="keyword">class </span>cUARTMessage : <span class="keyword">public</span> <a name="_a0"></a><a class="code" href="classn_pattern_1_1c_observed.htm">nPattern::cObserved</a> {</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">public</span>:</div>
<div class="line">        <span class="comment">/*</span></div>
<div class="line"><span class="comment">         * Constructor.  make stable instance</span></div>
<div class="line"><span class="comment">         *</span></div>
<div class="line"><span class="comment">         * \param[in] xRxUart Receive UART</span></div>
<div class="line"><span class="comment">         * \param[in] xTxUart Transmit UART</span></div>
<div class="line"><span class="comment">         * \param[in] message Message for instance to search receive UART data</span></div>
<div class="line"><span class="comment">         * \param[in] event Event for observer pattern (optional)</span></div>
<div class="line"><span class="comment">         */</span></div>
<div class="line">        cUARTMessage(<a name="_a1"></a><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">nFRTOSPeripheral::cUARTRX&lt;lineLengthN&gt;</a> &amp;xRxUart, <a name="_a2"></a><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">nFRTOSPeripheral::cUARTTX&lt;lineLengthN&gt;</a> &amp;xTxUart, \</div>
<div class="line">                            <span class="keyword">const</span> <span class="keywordtype">char</span> *message, <span class="keyword">const</span> uint32_t event = 0UL) : _xTxUart(xTxUart) {</div>
<div class="line">            <span class="comment">// Add this instance to observer on receive UART</span></div>
<div class="line">            xRxUart.<a name="a3"></a><a class="code" href="classn_pattern_1_1c_observed.htm#a7143d6699d87e732ddd1b3a2e918df78">appendObserver</a>(<span class="keyword">static_cast&lt;</span><a name="_a4"></a><a class="code" href="classn_pattern_1_1c_observer.htm">nPattern::cObserver</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>));</div>
<div class="line">            strcpy(_message, message);</div>
<div class="line">            _messageLength = strlen(_message);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">protected</span>:</div>
<div class="line">        <span class="comment">/*</span></div>
<div class="line"><span class="comment">         * Observed UART instance containing possible messaging data.  We won&#39;t bother post to our own tasks queue just </span></div>
<div class="line"><span class="comment">         * handle event in UART&#39;s task (i.e. from here)</span></div>
<div class="line"><span class="comment">         *</span></div>
<div class="line"><span class="comment">         * \param pxSender Instance of observed or source of the notification, cast accordingly</span></div>
<div class="line"><span class="comment">         * \return Accept message state</span></div>
<div class="line"><span class="comment">         */</span></div>
<div class="line">        <span class="keywordtype">bool</span> <a name="a5"></a><a class="code" href="classn_pattern_1_1c_observer.htm#a570b21e438389ea833541237b8bcaa0b">update</a>(<span class="keyword">const</span> cObserved *pxSender) {</div>
<div class="line">            <span class="keywordtype">bool</span> accept = <span class="keyword">false</span>; <span class="comment">// don&#39;t accept, will pass to next listener</span></div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Get our receive uart instance</span></div>
<div class="line">            <span class="keyword">const</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">nFRTOSPeripheral::cUARTRX&lt;lineLengthN&gt;</a> *pUart=<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">nFRTOSPeripheral::cUARTRX&lt;lineLengthN&gt;</a>*<span class="keyword">&gt;</span>(pSender);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (0 == ::strncmp( pUart-&gt;<a name="a6"></a><a class="code" href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">getLine</a>(), _message , _messageLength)) {</div>
<div class="line">                accept = <span class="keyword">true</span>;</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// Output received message as we handle it...  couple of lines so group with critical section</span></div>
<div class="line">                taskENTER_CRITICAL();</div>
<div class="line">                _xTxUart.transmit(<span class="stringliteral">&quot;RX: &quot;</span>);</div>
<div class="line">                _xTxUart.transmit(_message);</div>
<div class="line">                taskEXIT_CRITICAL();</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">return</span> accept;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">protected</span>:</div>
<div class="line">        uint8_t    _messageLength;                          <span class="comment">// Message length (characters)</span></div>
<div class="line">        <span class="keywordtype">char</span>       _message[msgLen];                        <span class="comment">// Message to handle</span></div>
<div class="line">        <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">nFRTOSPeripheral::cUARTTX&lt;lineLengthN&gt;</a> &amp;_xTxUart;   <span class="comment">// TX UART instance for output</span></div>
<div class="line">}; <span class="comment">// cUARTMessage</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">// Receive and Transmit UART tasks and queues</span></div>
<div class="line"><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">nFRTOSPeripheral::cUARTRX&lt;32&gt;</a>    xUartRX(HW_UART);</div>
<div class="line"><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">nFRTOSPeripheral::cUARTTX&lt;32&gt;</a>    xUartTX(HW_UART, 5);    <span class="comment">// TX queue size 5, don&#39;t expect more than this many lines buffered between task use</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// UART message handlers</span></div>
<div class="line">cUARTMessage&lt;32, 12&gt;            xUartMsgHello(xUartRX, xUartTX, <span class="stringliteral">&quot;HELLO&quot;</span>);</div>
<div class="line">cUARTMessage&lt;32, 12&gt;            xUartMsgWorld(xUartRX, xUartTX, <span class="stringliteral">&quot;WORLD&quot;</span>);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setup() {</div>
<div class="line">    <span class="comment">// Arduino hardware serial setup</span></div>
<div class="line">    Serial.begin(115200);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;Started&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    xUartRX.join();</div>
<div class="line">    xUartTX.join();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// In debug console on seperate lines, type &quot;HELLO&quot; or &quot;WORLD&quot; to get responses</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Start pre-emption (all ok we block here)</span></div>
<div class="line">    vTaskStartScheduler();</div>
<div class="line">    <span class="keywordflow">for</span>(;;);    <span class="comment">// dont enter Arduino loop() function...</span></div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> loop() {</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassn_pattern_1_1c_observer_htm"><div class="ttname"><a href="classn_pattern_1_1c_observer.htm">nPattern::cObserver</a></div><div class="ttdoc">An abstract class performing an implemention of the observer design pattern - observer part (listener...</div><div class="ttdef"><b>Definition:</b> pattern.h:51</div></div>
<div class="ttc" id="afrtosgcpp_8h_htm"><div class="ttname"><a href="frtosgcpp_8h.htm">frtosgcpp.h</a></div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">nFRTOSPeripheral::cUARTTX</a></div><div class="ttdoc">A wrapper class for an Arduino hardware UART TX operation that is FRTOS task friendly using queues.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:111</div></div>
<div class="ttc" id="aclassn_pattern_1_1c_observed_htm_a7143d6699d87e732ddd1b3a2e918df78"><div class="ttname"><a href="classn_pattern_1_1c_observed.htm#a7143d6699d87e732ddd1b3a2e918df78">nPattern::cObserved::appendObserver</a></div><div class="ttdeci">void appendObserver(cObserver *pxL)</div><div class="ttdoc">Append an observer instance.</div><div class="ttdef"><b>Definition:</b> pattern.h:92</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_a3bf0f7b47b83065c0e006d08e592197e"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">nText::cTextLine::getLine</a></div><div class="ttdeci">const char * getLine() const</div><div class="ttdoc">Get pointer to null terminated string.</div><div class="ttdef"><b>Definition:</b> text.h:82</div></div>
<div class="ttc" id="aclassn_pattern_1_1c_observer_htm_a570b21e438389ea833541237b8bcaa0b"><div class="ttname"><a href="classn_pattern_1_1c_observer.htm#a570b21e438389ea833541237b8bcaa0b">nPattern::cObserver::update</a></div><div class="ttdeci">virtual bool update(const cObserved *pxSender)=0</div><div class="ttdoc">Update (or callback) method invoked by cObserved objects.</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">nFRTOSPeripheral::cUARTRX</a></div><div class="ttdoc">A class to read complete text lines that is FRTOS task friendly sourced from Arduino hardware UARTs b...</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:21</div></div>
<div class="ttc" id="aclassn_pattern_1_1c_observed_htm"><div class="ttname"><a href="classn_pattern_1_1c_observed.htm">nPattern::cObserved</a></div><div class="ttdoc">A class performing an implementation of the observer design pattern - subject/observed part (source)</div><div class="ttdef"><b>Definition:</b> pattern.h:78</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 17:03:14 for ArduinoFRTOSGCPP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
