<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoFRTOSGCPP: frtos_peripheral.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoFRTOSGCPP
   &#160;<span id="projectnumber">d91a63f (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('frtos__peripheral_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">frtos_peripheral.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="frtos__peripheral_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Microcontroller peripheral interface classes for FRTOS</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT          : FRTOS GCPP</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM    : Arduino, Maple Mini</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef frtosperipheral_h</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define frtosperipheral_h</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="text_8h.htm">text.h</a>&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="frtos__ext_8h.htm">frtos_ext.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span>nFRTOSPeripheral {<span class="comment"></span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">     * A class to read complete text lines that is FRTOS task friendly sourced from Arduino hardware UARTs built upon observer design pattern and queues</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">     * \tparam N Text line length (characters, including NULL)</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">template</span> &lt;u<span class="keywordtype">int</span>16_t N&gt;</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">   21</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">cUARTRX</a> : <span class="keyword">public</span> <a class="code" href="classn_f_r_t_o_s_ext_1_1c_observed_task.htm">nFRTOSExt::cObservedTask</a>, <span class="keyword">public</span> <a class="code" href="classn_text_1_1c_texter.htm">nText::cTexter</a>&lt;N&gt; {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">             * Constructor.  Make stable instance</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">             * \param[in] xSerial Reference to Ardiuno hardware serial port instance, used to receive data</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">             * \param[in] ucRXDelay FRTOS task delay in ticks between character reading (efficiency aid, default 5)</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#aa9bed380709556474bbf02c844f414b1">   29</a></span>&#160;            <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#aa9bed380709556474bbf02c844f414b1">cUARTRX</a>(HardwareSerial &amp;xSerial, uint8_t ucRXDelay=5) : _xSerial(xSerial), _ucRXDelay(ucRXDelay) { }</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">             * Create task and start it</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">             * \note Originally setup task name as &quot;UArtR&lt;rx pin&gt;&quot; but no debugger for Arduino code so no point</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">             * \param[in] priority Task priority level, default +1 above idle</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">             * \param[in] stackSize Task stack size (Bytes), default 3 * configMINIMAL_STACK_SIZE</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">             * \return Join state</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a6f06e415136d5a6a6f035fd9699e7f16">   40</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a6f06e415136d5a6a6f035fd9699e7f16">join</a>(<span class="keyword">const</span> UBaseType_t priority = tskIDLE_PRIORITY + 1, <span class="keyword">const</span> uint32_t stackSize=configMINIMAL_STACK_SIZE * 3) {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="keywordflow">if</span> (!<a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a>()) {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                    <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a>(NULL, priority, stackSize);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a>();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">             * Implemented to complete \ref nText::cTexter interface, not used in this here due to nature of simplex class (i.e. receive only)</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">             *    \param scChar ignore</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a2d9d70f2d5765cee37048885bee7a940">   55</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a2d9d70f2d5765cee37048885bee7a940">characterWrite</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> scChar) {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                (void)scChar;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">             * For \ref nText::cTexter interface, FRTOS inter-character delay.  Only bothered with this because interrupts are hidden from user for Arduino UART</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#ab2e860183456fae7c51e185d7f88de97">   63</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#ab2e860183456fae7c51e185d7f88de97">characterReadDelay</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="comment">// any character reading delay?  allows other tasks to do stuff.  since lower level serial has good character buffering its a good idea to use it</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">if</span> (_ucRXDelay) {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                    vTaskDelay(_ucRXDelay);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">             * For \ref nText::cTexter interface.  Read character from UART</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">             * \param[out] pscChar Pointer to character receive buffer</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">             * \return Character read valid state.  When true pscChar is valid otherwise ignore</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#afb35aa2a5871aeb2c7e715e065ce381a">   77</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#afb35aa2a5871aeb2c7e715e065ce381a">characterRead</a>(<span class="keywordtype">char</span> *pscChar) {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keywordtype">bool</span> bValid=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">if</span> (_xSerial.available()) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    *pscChar=_xSerial.read();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    bValid=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">return</span> bValid;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">             * Receive task loop.  Read a line and notify any listeners</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a832efef279b75b3ab96127ec27f9d34b">   92</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a832efef279b75b3ab96127ec27f9d34b">run</a>() {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">for</span> (;;) {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <a class="code" href="classn_text_1_1c_texter.htm#acdbe1b7591ff8813f6d2806e17a1e4d0">nText::cTexter&lt;N&gt;::blockingReadLine</a>(<span class="keyword">this</span>, <a class="code" href="classn_text_1_1c_texter.htm">nText::cTexter&lt;N&gt;::_scLine</a>);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <a class="code" href="classn_pattern_1_1c_observed.htm#ac581f08fec54646130aabb0969cbaba6">notify</a>();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            uint8_t                _ucRXDelay;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            HardwareSerial&amp;        _xSerial;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }; <span class="comment">// class cUARTRX</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     * A wrapper class for an Arduino hardware UART TX operation that is FRTOS task friendly using queues</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     * \tparam N Text line length (characters, including NULL)</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">template</span> &lt;u<span class="keywordtype">int</span>16_t N&gt;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">  111</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">cUARTTX</a> : <span class="keyword">public</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm">nFRTOS::cTask</a> {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">             * Constructor.  Make stable instance</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">             * \param[in] xSerial Reference to Ardiuno hardware serial port instance, used to receive data</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">             * \param ucQueueSize in cTextLine objects</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a9a166940df1e5efffe3b413610d64ff9">  119</a></span>&#160;            <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a9a166940df1e5efffe3b413610d64ff9">cUARTTX</a>(HardwareSerial &amp;xSerial, <span class="keyword">const</span> uint8_t ucQueueSize) : _xSerial(xSerial), _xTxQueue(ucQueueSize) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">             * Transmit given cTextLine over UART, FRTOS task safe, posts on TX queue</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">             * \param[in] xTextLine Reference to instance of text line to send.  Should include line ending like &quot;\r\n&quot;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">             * \return Transmit success or failure</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a9cff5b85dac838e8fea24572118863c6">  129</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a9cff5b85dac838e8fea24572118863c6">transmit</a>(<a class="code" href="classn_text_1_1c_text_line.htm">nText::cTextLine&lt;N&gt;</a> &amp;xTextLine) {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">return</span> _xTxQueue.<a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">send</a>(xTextLine);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">             * Transmit given character string over UART, FRTOS task safe, posts on TX queue</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">             *    \param[in] pscTextLine Null terminated character string pointer.  Should include line ending &quot;\r\n&quot;</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">             *    \return Transmit success or failure</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#ae732fb1a9adc3e9db48fb1869823f348">  140</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#ae732fb1a9adc3e9db48fb1869823f348">transmit</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *pscTextLine) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <a class="code" href="classn_text_1_1c_text_line.htm">nText::cTextLine&lt;N&gt;</a> xTextLine(pscTextLine);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">return</span> _xTxQueue.<a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">send</a>(xTextLine);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">             * Transmit given fixed length character string over UART, FRTOS task safe, posts on TX queue</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">             * \param[in] pscTextLine Null terminated character string pointer.  Should include line ending &quot;\r\n&quot;</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">             * \param ucLength Length of string in characters, should not include NULL terminator</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">             * \return Transmit success or failure</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a853961564553667080d4ad7cd82b5707">  154</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a853961564553667080d4ad7cd82b5707">transmit</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *pscTextLine, <span class="keyword">const</span> uint8_t ucLength) {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <a class="code" href="classn_text_1_1c_text_line.htm">nText::cTextLine&lt;N&gt;</a> xTextLine(pscTextLine, ucLength);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">return</span> _xTxQueue.<a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">send</a>(xTextLine);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">             * Create task and start it + create queue</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">             * \note Originally setup task name as &quot;UArtT&lt;tx pin&gt;&quot; but no debugger for arduino code so no point</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">             * \return Join and queue state</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#adf139a67992602e9c4ebe8411312b5b0">  167</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#adf139a67992602e9c4ebe8411312b5b0">join</a>(<span class="keyword">const</span> UBaseType_t priority = tskIDLE_PRIORITY + 1, <span class="keyword">const</span> uint32_t stackSize=configMINIMAL_STACK_SIZE * 4) {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">if</span> (!<a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a>()) {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a>(NULL, priority, stackSize);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    _xTxQueue.<a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#ab758da8c532339b78c97b77c5c68545e">create</a>();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a>() &amp;&amp; _xTxQueue.<a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a51ffc00753062126a6bc81894956e4e7">isValidHandle</a>();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">             * Transmit task loop.  Read TX queue and output line over hardware UART</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a10d74924e9ce23d35c49fa73f21744dd">  182</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a10d74924e9ce23d35c49fa73f21744dd">run</a>() {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <a class="code" href="classn_text_1_1c_text_line.htm">nText::cTextLine&lt;N&gt;</a> data;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">for</span> (;;) {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    <span class="comment">// Wait for tx data (endlessly), is it ok?</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keywordflow">if</span> (_xTxQueue.<a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#aa6fb54ccad391d70454fd8ca12991a30">receive</a>(data)) {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        uint8_t l=data.<a class="code" href="classn_text_1_1c_text_line.htm#afa6174b97e988c0ddd96e48533486aa1">getLineLength</a>();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">char</span> *pscLine=data.<a class="code" href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">getLine</a>();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <span class="comment">// Send over serial</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        <span class="keywordflow">for</span>(uint8_t i=0;i&lt;l;i++) {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                            _xSerial.write(pscLine[i]);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm">nFRTOS::cQueue&lt;nText::cTextLine&lt;N&gt;</a>&gt;    _xTxQueue;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            HardwareSerial&amp;                        _xSerial;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }; <span class="comment">// class cUARTTX</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;} <span class="comment">// namespace nFRTOSPeripheral</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">#endif // frtosperipheral_h</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_aa6fb54ccad391d70454fd8ca12991a30"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#aa6fb54ccad391d70454fd8ca12991a30">nFRTOS::cQueue::receive</a></div><div class="ttdeci">bool receive(QType &amp;xData, const TickType_t xTicksToWait=portMAX_DELAY) const</div><div class="ttdoc">Receive data from queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:282</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm_adf139a67992602e9c4ebe8411312b5b0"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#adf139a67992602e9c4ebe8411312b5b0">nFRTOSPeripheral::cUARTTX::join</a></div><div class="ttdeci">bool join(const UBaseType_t priority=tskIDLE_PRIORITY+1, const uint32_t stackSize=configMINIMAL_STACK_SIZE *4)</div><div class="ttdoc">Create task and start it + create queue.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:167</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a4e91aca895cfbabf02d106294c8cc8ce"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">nFRTOS::cTask::isValidHandle</a></div><div class="ttdeci">bool isValidHandle() const</div><div class="ttdoc">Test FRTOS task handle.</div><div class="ttdef"><b>Definition:</b> frtos.h:42</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_afa6174b97e988c0ddd96e48533486aa1"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#afa6174b97e988c0ddd96e48533486aa1">nText::cTextLine::getLineLength</a></div><div class="ttdeci">uint8_t getLineLength() const</div><div class="ttdoc">Get line string length in characters.</div><div class="ttdef"><b>Definition:</b> text.h:92</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm_a853961564553667080d4ad7cd82b5707"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a853961564553667080d4ad7cd82b5707">nFRTOSPeripheral::cUARTTX::transmit</a></div><div class="ttdeci">bool transmit(const char *pscTextLine, const uint8_t ucLength)</div><div class="ttdoc">Transmit given fixed length character string over UART, FRTOS task safe, posts on TX queue.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:154</div></div>
<div class="ttc" id="aclassn_pattern_1_1c_observed_htm_ac581f08fec54646130aabb0969cbaba6"><div class="ttname"><a href="classn_pattern_1_1c_observed.htm#ac581f08fec54646130aabb0969cbaba6">nPattern::cObserved::notify</a></div><div class="ttdeci">void notify()</div><div class="ttdoc">Observed instance notifier method, invokes all subscribers.</div><div class="ttdef"><b>Definition:</b> pattern.h:103</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm_ae732fb1a9adc3e9db48fb1869823f348"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#ae732fb1a9adc3e9db48fb1869823f348">nFRTOSPeripheral::cUARTTX::transmit</a></div><div class="ttdeci">bool transmit(const char *pscTextLine)</div><div class="ttdoc">Transmit given character string over UART, FRTOS task safe, posts on TX queue.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:140</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm_a10d74924e9ce23d35c49fa73f21744dd"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a10d74924e9ce23d35c49fa73f21744dd">nFRTOSPeripheral::cUARTTX::run</a></div><div class="ttdeci">void run()</div><div class="ttdoc">Transmit task loop.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:182</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm_a832efef279b75b3ab96127ec27f9d34b"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a832efef279b75b3ab96127ec27f9d34b">nFRTOSPeripheral::cUARTRX::run</a></div><div class="ttdeci">void run()</div><div class="ttdoc">Receive task loop.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:92</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm">nFRTOSPeripheral::cUARTTX</a></div><div class="ttdoc">A wrapper class for an Arduino hardware UART TX operation that is FRTOS task friendly using queues.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:111</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm_a9cff5b85dac838e8fea24572118863c6"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a9cff5b85dac838e8fea24572118863c6">nFRTOSPeripheral::cUARTTX::transmit</a></div><div class="ttdeci">bool transmit(nText::cTextLine&lt; N &gt; &amp;xTextLine)</div><div class="ttdoc">Transmit given cTextLine over UART, FRTOS task safe, posts on TX queue.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:129</div></div>
<div class="ttc" id="afrtos__ext_8h_htm"><div class="ttname"><a href="frtos__ext_8h.htm">frtos_ext.h</a></div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a51ffc00753062126a6bc81894956e4e7"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a51ffc00753062126a6bc81894956e4e7">nFRTOS::cQueue::isValidHandle</a></div><div class="ttdeci">bool isValidHandle() const</div><div class="ttdoc">Test FRTOS queue handle.</div><div class="ttdef"><b>Definition:</b> frtos.h:231</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_a3bf0f7b47b83065c0e006d08e592197e"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">nText::cTextLine::getLine</a></div><div class="ttdeci">const char * getLine() const</div><div class="ttdoc">Get pointer to null terminated string.</div><div class="ttdef"><b>Definition:</b> text.h:82</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm_a2d9d70f2d5765cee37048885bee7a940"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a2d9d70f2d5765cee37048885bee7a940">nFRTOSPeripheral::cUARTRX::characterWrite</a></div><div class="ttdeci">void characterWrite(const char scChar)</div><div class="ttdoc">Implemented to complete nText::cTexter interface, not used in this here due to nature of simplex clas...</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:55</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm">nFRTOSPeripheral::cUARTRX</a></div><div class="ttdoc">A class to read complete text lines that is FRTOS task friendly sourced from Arduino hardware UARTs b...</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:21</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm"><div class="ttname"><a href="classn_text_1_1c_text_line.htm">nText::cTextLine</a></div><div class="ttdoc">A class to represent a text line string.</div><div class="ttdef"><b>Definition:</b> text.h:21</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm_aa9bed380709556474bbf02c844f414b1"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#aa9bed380709556474bbf02c844f414b1">nFRTOSPeripheral::cUARTRX::cUARTRX</a></div><div class="ttdeci">cUARTRX(HardwareSerial &amp;xSerial, uint8_t ucRXDelay=5)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:29</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm_afb35aa2a5871aeb2c7e715e065ce381a"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#afb35aa2a5871aeb2c7e715e065ce381a">nFRTOSPeripheral::cUARTRX::characterRead</a></div><div class="ttdeci">bool characterRead(char *pscChar)</div><div class="ttdoc">For nText::cTexter interface.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:77</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_ext_1_1c_observed_task_htm"><div class="ttname"><a href="classn_f_r_t_o_s_ext_1_1c_observed_task.htm">nFRTOSExt::cObservedTask</a></div><div class="ttdoc">A class to representing interfaces of observer/observed pattern with a FRTOS task.</div><div class="ttdef"><b>Definition:</b> frtos_ext.h:24</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_ab758da8c532339b78c97b77c5c68545e"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#ab758da8c532339b78c97b77c5c68545e">nFRTOS::cQueue::create</a></div><div class="ttdeci">bool create()</div><div class="ttdoc">Create FRTOS queue and test handle, isValidHandle.</div><div class="ttdef"><b>Definition:</b> frtos.h:209</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x_htm_a9a166940df1e5efffe3b413610d64ff9"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a9a166940df1e5efffe3b413610d64ff9">nFRTOSPeripheral::cUARTTX::cUARTTX</a></div><div class="ttdeci">cUARTTX(HardwareSerial &amp;xSerial, const uint8_t ucQueueSize)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:119</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm"><div class="ttname"><a href="classn_text_1_1c_texter.htm">nText::cTexter</a></div><div class="ttdoc">Class to aid device specific text line i/o.</div><div class="ttdef"><b>Definition:</b> text.h:108</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm_a6f06e415136d5a6a6f035fd9699e7f16"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a6f06e415136d5a6a6f035fd9699e7f16">nFRTOSPeripheral::cUARTRX::join</a></div><div class="ttdeci">bool join(const UBaseType_t priority=tskIDLE_PRIORITY+1, const uint32_t stackSize=configMINIMAL_STACK_SIZE *3)</div><div class="ttdoc">Create task and start it.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:40</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a198cfa8c045358a9d5854ca7a468d4c3"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">nFRTOS::cQueue::send</a></div><div class="ttdeci">bool send(const QType &amp;xData, const TickType_t xTicksToWait=portMAX_DELAY) const</div><div class="ttdoc">Send xData to queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:299</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm">nFRTOS::cQueue</a></div><div class="ttdoc">A class wrapping a single queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:184</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm_acdbe1b7591ff8813f6d2806e17a1e4d0"><div class="ttname"><a href="classn_text_1_1c_texter.htm#acdbe1b7591ff8813f6d2806e17a1e4d0">nText::cTexter::blockingReadLine</a></div><div class="ttdeci">static void blockingReadLine(cTexter&lt; N &gt; *pxThis, char *pscData)</div><div class="ttdoc">Blocking read line as character string from given cTexter instance.</div><div class="ttdef"><b>Definition:</b> text.h:141</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x_htm_ab2e860183456fae7c51e185d7f88de97"><div class="ttname"><a href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#ab2e860183456fae7c51e185d7f88de97">nFRTOSPeripheral::cUARTRX::characterReadDelay</a></div><div class="ttdeci">void characterReadDelay() const</div><div class="ttdoc">For nText::cTexter interface, FRTOS inter-character delay.</div><div class="ttdef"><b>Definition:</b> frtos_peripheral.h:63</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm">nFRTOS::cTask</a></div><div class="ttdoc">An abstract class wrapping a single FRTOS task.</div><div class="ttdef"><b>Definition:</b> frtos.h:19</div></div>
<div class="ttc" id="atext_8h_htm"><div class="ttname"><a href="text_8h.htm">text.h</a></div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a402ca47e8e43b64e6157a17cd81d9ff5"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">nFRTOS::cTask::start</a></div><div class="ttdeci">void start(const char *pcTaskName, const UBaseType_t ulPriority, const uint32_t ulStackSize=configMINIMAL_STACK_SIZE)</div><div class="ttdoc">Create task and start running.</div><div class="ttdef"><b>Definition:</b> frtos.h:125</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="frtos__peripheral_8h.htm">frtos_peripheral.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 17:03:14 for ArduinoFRTOSGCPP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
