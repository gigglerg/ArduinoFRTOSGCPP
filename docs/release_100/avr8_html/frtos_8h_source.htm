<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoFRTOSGCPP: frtos.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoFRTOSGCPP
   &#160;<span id="projectnumber">d91a63f (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('frtos_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">frtos.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="frtos_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Simple class wrappers and associated structures for interaction with FRTOS</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT          : FRTOS GCPP</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM    : Arduino, Maple Mini</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef frtos_h</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define frtos_h</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#if defined(ARDUINO_SAM_DUE) &amp;&amp; defined(FRTOS_SAM_CONTROL)</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">extern</span> <span class="keywordtype">int</span> sysTickEnabled;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#endif // defined(ARDUINO_SAM_DUE) &amp;&amp; defined(FRTOS_SAM_CONTROL)</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span>nFRTOS {<span class="comment"></span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">     * An abstract class wrapping a single FRTOS task</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm">   19</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classn_f_r_t_o_s_1_1c_task.htm">cTask</a> {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">             * Default constructor, nake stable instance</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#a99bba5627bc1b7eb2fe103998a9c0e9c">   24</a></span>&#160;            <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a99bba5627bc1b7eb2fe103998a9c0e9c">cTask</a>() : _xTHandle(NULL) , _bRunning(false) { }</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">             * Get FRTOS task handle or NULL.  \ref start for details</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">             * \return TaskHandle_t</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#ace84938f79339c8102e736e0d1930bad">   32</a></span>&#160;            TaskHandle_t <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#ace84938f79339c8102e736e0d1930bad">getHandle</a>() {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                <span class="keywordflow">return</span> _xTHandle;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">             * Test FRTOS task handle</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">             * \return Valid state</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">   42</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                <span class="keywordflow">return</span> (_xTHandle?<span class="keyword">true</span>:<span class="keyword">false</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">             * Get FRTOS task running state</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">             * \return Running state</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#a75ccedd63e259e8d3b4075d934932946">   52</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a75ccedd63e259e8d3b4075d934932946">isRunning</a>() {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">return</span> _bRunning;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">             * Suspend task</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">             * \param[in] xTHandleSpecific Task hande, default NULL = this task</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#a6bb94892cbcb0c55842d9266eb9e22f7">   62</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a6bb94892cbcb0c55842d9266eb9e22f7">suspend</a>(<span class="keyword">const</span> TaskHandle_t xTHandleSpecific=NULL)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="comment">// specific task?</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">if</span> (xTHandleSpecific) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    vTaskSuspend(xTHandleSpecific);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                    <span class="comment">// this task</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                    vTaskSuspend(_xTHandle);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">             * Resume task</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">             * \param[in] xTHandleSpecific Task hande, default NULL = this task</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#a026ab6cbf3517b5064e0b48dfc48b2be">   78</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a026ab6cbf3517b5064e0b48dfc48b2be">resume</a>(<span class="keyword">const</span> TaskHandle_t xTHandleSpecific=NULL)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="comment">// specific task?</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">if</span> (xTHandleSpecific) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    vTaskResume(xTHandleSpecific);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="comment">// this task</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    vTaskResume(_xTHandle);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#if defined(ARDUINO_SAM_DUE) &amp;&amp; defined(FRTOS_SAM_CONTROL)</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">             * Tasking stop.  Specific Arduino Atmal91SAM implementation where a global in the framework is used to control interrupt driven task switching.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">             * Use this method to disable tasking while still keeping global IRQs enabled.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">             * \attention Caller should define FRTOS_SAM_CONTROL if this API is required</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordtype">void</span> taskingStop()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                sysTickEnabled = 0;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">             * Tasking start.  Specific Arduino Atmal91SAM implementation where a global in the framework is used to control interrupt driven task switching.</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">             * Use this method to enable tasking while still keeping global IRQs enabled.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">             * \attention Caller should define FRTOS_SAM_CONTROL if this API is required</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordtype">void</span> taskingStart()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                sysTickEnabled = 1;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#endif // defined(ARDUINO_SAM_DUE) &amp;&amp; defined(FRTOS_SAM_CONTROL)</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">             * Create task and start running</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">             * \note Running state will not change until \see run() invoked</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">             * \note Use \ref isValidHandle to determine success of task creation</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">                * \attention Invoke from \see join() implementation</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">             * \param[in] pcTaskName Pointer to character string for task name (null terminated).  Can be NULL pointer if no string desired</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">             * \param[in] ulPriority Task priority</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">             * \param[in] ulStackSize Stack size in Bytes, default configMINIMAL_STACK_SIZE</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">  125</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *pcTaskName, <span class="keyword">const</span> UBaseType_t ulPriority, <span class="keyword">const</span> uint32_t ulStackSize=configMINIMAL_STACK_SIZE) {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                xTaskCreate(<a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#adc8aba53fc26c438dabb447961cdb49c">cTask::taskHandler</a>,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                            pcTaskName,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                            ulStackSize,</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                            <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>),    <span class="comment">// pvParameters pointer passed to cTask::taskHandler</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                            ulPriority,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                            &amp;_xTHandle);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">             * Create task and start running via \ref start.  Likely create other FRTOS elements as required by implementing class</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">             * \note Pre-condition, internally invoke \ref start and make public for users</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">             * \param[in] ulPriority Task priority level.  Default tskIDLE_PRIORITY + 1</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">             * \param[in] ulStackSize Stack size in Bytes, default configMINIMAL_STACK_SIZE</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">             * \return Overall state</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">             * \retval true Join successful</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">             * \retval false Join failed, one or more problems caused failure</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a773e388a901e20cb124e894dab28aba9">join</a>(<span class="keyword">const</span> UBaseType_t ulPriority = tskIDLE_PRIORITY + 1, <span class="keyword">const</span> uint32_t ulStackSize=configMINIMAL_STACK_SIZE) = 0;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">             * Task main loop, implementation should be a non-returning endless loop in most cases</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">             * \note Keep protected or lower to private</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d">run</a>() = 0;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">             * Task callback handler, invokes user defined \see run() method</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">             * \param[in,out] pvParameters Pointer to this instance</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_task.htm#adc8aba53fc26c438dabb447961cdb49c">  162</a></span>&#160;            <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#adc8aba53fc26c438dabb447961cdb49c">taskHandler</a>(<span class="keywordtype">void</span> *pvParameters) {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="comment">// setup?</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">if</span> (NULL!=pvParameters) {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="comment">// change running flag + invoke user method</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classn_f_r_t_o_s_1_1c_task.htm">cTask</a> *<span class="keyword">&gt;</span>(pvParameters)-&gt;_bRunning=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classn_f_r_t_o_s_1_1c_task.htm">cTask</a> *<span class="keyword">&gt;</span>(pvParameters)-&gt;<a class="code" href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d">run</a>();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classn_f_r_t_o_s_1_1c_task.htm">cTask</a> *<span class="keyword">&gt;</span>(pvParameters)-&gt;_bRunning=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordtype">bool</span>             _bRunning;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            TaskHandle_t     _xTHandle;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }; <span class="comment">// class cTask</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * A class wrapping a single queue</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * \tparam QType Data type stored in queue</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm">  184</a></span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> QType&gt; <span class="keyword">class </span><a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm">cQueue</a> {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">             * Default constructor.  Make stable instance</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">             * \param[in] uxQueueLength Size of queue (elements)</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a6b3363e59e08d06e55302cce9f02f062">  191</a></span>&#160;            <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a6b3363e59e08d06e55302cce9f02f062">cQueue</a>(UBaseType_t uxQueueLength) : _xQHandle(NULL), _xSize(uxQueueLength) { }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">             * Destructor.  Release queue</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a3b6e5eaaee998f5880b18c5651765dc0">  197</a></span>&#160;            <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a3b6e5eaaee998f5880b18c5651765dc0">~cQueue</a>() {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordflow">if</span> (_xQHandle) {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    vQueueUnregisterQueue(_xQHandle);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">             * Create FRTOS queue and test handle, \ref isValidHandle</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">             * \return Creation state</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#ab758da8c532339b78c97b77c5c68545e">  209</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#ab758da8c532339b78c97b77c5c68545e">create</a>() {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                _xQHandle=xQueueCreate( _xSize, <span class="keyword">sizeof</span>(QType) );</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a51ffc00753062126a6bc81894956e4e7">isValidHandle</a>();</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">             * Get FRTOS queue handle or NULL</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">             * \return Queue handle</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a7ad9fc9b5a0c2ca6fa41e847bc122da3">  221</a></span>&#160;            QueueHandle_t <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a7ad9fc9b5a0c2ca6fa41e847bc122da3">getHandle</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordflow">return</span> _xQHandle;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">             * Test FRTOS queue handle</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">             * \return Handle valid state</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a51ffc00753062126a6bc81894956e4e7">  231</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a51ffc00753062126a6bc81894956e4e7">isValidHandle</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">return</span> (_xQHandle?<span class="keyword">true</span>:<span class="keyword">false</span>);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">             * Get size of data structure carried by queue</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">             * \return Size (Bytes)</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a1a08efb3a6704cd339cd90995cfc6911">  241</a></span>&#160;            UBaseType_t <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a1a08efb3a6704cd339cd90995cfc6911">getSize</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keywordflow">return</span> _xSize;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">             * Get queue spaces available for send (free space in QType unit counts)</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">             *    \return Spaces available (elements free)</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a718c46b08cdf0d18eefeb40cfe6a3f26">  251</a></span>&#160;            UBaseType_t <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a718c46b08cdf0d18eefeb40cfe6a3f26">getSpacesAvailable</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                <span class="keywordflow">return</span> uxQueueSpacesAvailable( _xQHandle );</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">             * Peek at data on queue.  If xTicksToWait expires and no data received bReceived will be false</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">             * \param[out] bReceived Valid element receive status.  If true then returned element can be used</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">             * \param[in] xTicksToWait Ticks to wait.  Default portMAX_DELAY (unlimited)</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">             * \return Element</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#af234ee34b56795a1dc4987e56f2a0ed6">  263</a></span>&#160;            QType <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#af234ee34b56795a1dc4987e56f2a0ed6">peek</a>(<span class="keywordtype">bool</span> &amp;bReceived, <span class="keyword">const</span> TickType_t xTicksToWait=portMAX_DELAY)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                QType xData;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                bReceived=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                 <span class="keywordflow">if</span> (pdTRUE == xQueuePeek(_xQHandle, <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(xData), xTicksToWait)) {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    bReceived=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keywordflow">return</span> xData;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">             * Receive data from queue.  If xTicksToWait expires and no data received bReceived will be false</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">             * \param[out] xData Reference to element received.  If returned state true then this is valid</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">             * \param[in] xTicksToWait Ticks to wait.  Default portMAX_DELAY (unlimited)</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">             * \return Receive status</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#aa6fb54ccad391d70454fd8ca12991a30">  282</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#aa6fb54ccad391d70454fd8ca12991a30">receive</a>(QType &amp;xData, <span class="keyword">const</span> TickType_t xTicksToWait=portMAX_DELAY)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keywordtype">bool</span> bReceived = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                 <span class="keywordflow">if</span> (pdTRUE == xQueueReceive(_xQHandle, <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(&amp;xData), xTicksToWait)) {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    bReceived=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">return</span> bReceived;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">             * Send xData to queue.  If xTicksToWait expires and no data sent due to block, result will be false</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">             * \param[in] xData Reference to element to send</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">             * \param[in] xTicksToWait Ticks to wait.  Default portMAX_DELAY (unlimited)</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">             * \return Send status</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">  299</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">send</a>(<span class="keyword">const</span> QType &amp;xData, <span class="keyword">const</span> TickType_t xTicksToWait=portMAX_DELAY)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="keywordtype">bool</span> bSent=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                 <span class="keywordflow">if</span> (pdTRUE == xQueueSend(_xQHandle, <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(&amp;xData), xTicksToWait)) {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    bSent=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">return</span> bSent;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            UBaseType_t        _xSize;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            QueueHandle_t      _xQHandle;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }; <span class="comment">// class cQueue</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;} <span class="comment">// namespace nFRTOS</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">#endif // frtos_h</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a6b3363e59e08d06e55302cce9f02f062"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a6b3363e59e08d06e55302cce9f02f062">nFRTOS::cQueue::cQueue</a></div><div class="ttdeci">cQueue(UBaseType_t uxQueueLength)</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> frtos.h:191</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_aa6fb54ccad391d70454fd8ca12991a30"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#aa6fb54ccad391d70454fd8ca12991a30">nFRTOS::cQueue::receive</a></div><div class="ttdeci">bool receive(QType &amp;xData, const TickType_t xTicksToWait=portMAX_DELAY) const</div><div class="ttdoc">Receive data from queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:282</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a026ab6cbf3517b5064e0b48dfc48b2be"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a026ab6cbf3517b5064e0b48dfc48b2be">nFRTOS::cTask::resume</a></div><div class="ttdeci">void resume(const TaskHandle_t xTHandleSpecific=NULL) const</div><div class="ttdoc">Resume task.</div><div class="ttdef"><b>Definition:</b> frtos.h:78</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a718c46b08cdf0d18eefeb40cfe6a3f26"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a718c46b08cdf0d18eefeb40cfe6a3f26">nFRTOS::cQueue::getSpacesAvailable</a></div><div class="ttdeci">UBaseType_t getSpacesAvailable() const</div><div class="ttdoc">Get queue spaces available for send (free space in QType unit counts)</div><div class="ttdef"><b>Definition:</b> frtos.h:251</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a773e388a901e20cb124e894dab28aba9"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a773e388a901e20cb124e894dab28aba9">nFRTOS::cTask::join</a></div><div class="ttdeci">virtual bool join(const UBaseType_t ulPriority=tskIDLE_PRIORITY+1, const uint32_t ulStackSize=configMINIMAL_STACK_SIZE)=0</div><div class="ttdoc">Create task and start running via start.</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a4e91aca895cfbabf02d106294c8cc8ce"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">nFRTOS::cTask::isValidHandle</a></div><div class="ttdeci">bool isValidHandle() const</div><div class="ttdoc">Test FRTOS task handle.</div><div class="ttdef"><b>Definition:</b> frtos.h:42</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a6bb94892cbcb0c55842d9266eb9e22f7"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a6bb94892cbcb0c55842d9266eb9e22f7">nFRTOS::cTask::suspend</a></div><div class="ttdeci">void suspend(const TaskHandle_t xTHandleSpecific=NULL) const</div><div class="ttdoc">Suspend task.</div><div class="ttdef"><b>Definition:</b> frtos.h:62</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a1a08efb3a6704cd339cd90995cfc6911"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a1a08efb3a6704cd339cd90995cfc6911">nFRTOS::cQueue::getSize</a></div><div class="ttdeci">UBaseType_t getSize() const</div><div class="ttdoc">Get size of data structure carried by queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:241</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_adc8aba53fc26c438dabb447961cdb49c"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#adc8aba53fc26c438dabb447961cdb49c">nFRTOS::cTask::taskHandler</a></div><div class="ttdeci">static void taskHandler(void *pvParameters)</div><div class="ttdoc">Task callback handler, invokes user defined.</div><div class="ttdef"><b>Definition:</b> frtos.h:162</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_af234ee34b56795a1dc4987e56f2a0ed6"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#af234ee34b56795a1dc4987e56f2a0ed6">nFRTOS::cQueue::peek</a></div><div class="ttdeci">QType peek(bool &amp;bReceived, const TickType_t xTicksToWait=portMAX_DELAY) const</div><div class="ttdoc">Peek at data on queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:263</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a51ffc00753062126a6bc81894956e4e7"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a51ffc00753062126a6bc81894956e4e7">nFRTOS::cQueue::isValidHandle</a></div><div class="ttdeci">bool isValidHandle() const</div><div class="ttdoc">Test FRTOS queue handle.</div><div class="ttdef"><b>Definition:</b> frtos.h:231</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_ab758da8c532339b78c97b77c5c68545e"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#ab758da8c532339b78c97b77c5c68545e">nFRTOS::cQueue::create</a></div><div class="ttdeci">bool create()</div><div class="ttdoc">Create FRTOS queue and test handle, isValidHandle.</div><div class="ttdef"><b>Definition:</b> frtos.h:209</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_ace84938f79339c8102e736e0d1930bad"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#ace84938f79339c8102e736e0d1930bad">nFRTOS::cTask::getHandle</a></div><div class="ttdeci">TaskHandle_t getHandle()</div><div class="ttdoc">Get FRTOS task handle or NULL.</div><div class="ttdef"><b>Definition:</b> frtos.h:32</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a7ad9fc9b5a0c2ca6fa41e847bc122da3"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a7ad9fc9b5a0c2ca6fa41e847bc122da3">nFRTOS::cQueue::getHandle</a></div><div class="ttdeci">QueueHandle_t getHandle() const</div><div class="ttdoc">Get FRTOS queue handle or NULL.</div><div class="ttdef"><b>Definition:</b> frtos.h:221</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a198cfa8c045358a9d5854ca7a468d4c3"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a198cfa8c045358a9d5854ca7a468d4c3">nFRTOS::cQueue::send</a></div><div class="ttdeci">bool send(const QType &amp;xData, const TickType_t xTicksToWait=portMAX_DELAY) const</div><div class="ttdoc">Send xData to queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:299</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm">nFRTOS::cQueue</a></div><div class="ttdoc">A class wrapping a single queue.</div><div class="ttdef"><b>Definition:</b> frtos.h:184</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_queue_htm_a3b6e5eaaee998f5880b18c5651765dc0"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_queue.htm#a3b6e5eaaee998f5880b18c5651765dc0">nFRTOS::cQueue::~cQueue</a></div><div class="ttdeci">~cQueue()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition:</b> frtos.h:197</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a99bba5627bc1b7eb2fe103998a9c0e9c"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a99bba5627bc1b7eb2fe103998a9c0e9c">nFRTOS::cTask::cTask</a></div><div class="ttdeci">cTask()</div><div class="ttdoc">Default constructor, nake stable instance.</div><div class="ttdef"><b>Definition:</b> frtos.h:24</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm">nFRTOS::cTask</a></div><div class="ttdoc">An abstract class wrapping a single FRTOS task.</div><div class="ttdef"><b>Definition:</b> frtos.h:19</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a402ca47e8e43b64e6157a17cd81d9ff5"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">nFRTOS::cTask::start</a></div><div class="ttdeci">void start(const char *pcTaskName, const UBaseType_t ulPriority, const uint32_t ulStackSize=configMINIMAL_STACK_SIZE)</div><div class="ttdoc">Create task and start running.</div><div class="ttdef"><b>Definition:</b> frtos.h:125</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a75ccedd63e259e8d3b4075d934932946"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a75ccedd63e259e8d3b4075d934932946">nFRTOS::cTask::isRunning</a></div><div class="ttdeci">bool isRunning()</div><div class="ttdoc">Get FRTOS task running state.</div><div class="ttdef"><b>Definition:</b> frtos.h:52</div></div>
<div class="ttc" id="aclassn_f_r_t_o_s_1_1c_task_htm_a80ef40a1ef27e6fdd396c87834c55f9d"><div class="ttname"><a href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d">nFRTOS::cTask::run</a></div><div class="ttdeci">virtual void run()=0</div><div class="ttdoc">Task main loop, implementation should be a non-returning endless loop in most cases.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="frtos_8h.htm">frtos.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 17:03:14 for ArduinoFRTOSGCPP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
