<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoFRTOSGCPP: string_helper.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoFRTOSGCPP
   &#160;<span id="projectnumber">d91a63f (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('string__helper_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">string_helper.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="string__helper_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Part of the text handling classes, string helpers</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * \todo    Refactor with Arduino streams</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * PROJECT          : FRTOS GCPP</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * TARGET SYSTEM    : Arduino, Maple Mini</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#ifndef stringhelper_h</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define stringhelper_h</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span>nText {<span class="comment"></span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">     * A helper class for strings (character arrays).  sprintf(...) in maple builds adds 20% to builds and becomes unstable, hence these short helpers just for arduino builds</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classn_text_1_1c_string_helper.htm">   16</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classn_text_1_1c_string_helper.htm">cStringHelper</a> {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">             * Reverse character string with known length</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">             * \param[in,out] pscStr String pointer</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">             * \param[in] ucLength Length (characters)</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">             * \return Character string pointer</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classn_text_1_1c_string_helper.htm#ab23ac33bc72c57fac42b0ba7c57fa760">   26</a></span>&#160;            <span class="keyword">static</span> <span class="keywordtype">char</span> *<a class="code" href="classn_text_1_1c_string_helper.htm#ab23ac33bc72c57fac42b0ba7c57fa760">reverse</a>(<span class="keywordtype">char</span> *pscStr, uint8_t ucLength) {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                uint8_t ucI;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                <span class="keywordflow">if</span> (ucLength&lt;=1) {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                    <span class="keywordflow">return</span> pscStr;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                }</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                ucLength--;    <span class="comment">// last character always -1</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                <span class="keywordflow">for</span>(ucI=0;ucI&lt;(ucLength+1)&gt;&gt;1;ucI++) {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                    <span class="comment">// exclusive OR swap character [ucI] with [ucLength-ucI]</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                    pscStr[ucI] = pscStr[ucI] ^ pscStr[ucLength-ucI];</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                    pscStr[ucLength-ucI] = pscStr[ucLength-ucI] ^ pscStr[ucI];</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                    pscStr[ucI] = pscStr[ucI] ^ pscStr[ucLength-ucI];</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                }</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="keywordflow">return</span> pscStr;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            } <span class="comment">// reverse(...)</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">             * String from integer, itoa like function.  tested base 10 and 16</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">             * source: http://stackoverflow.com/questions/190229/where-is-the-itoa-function-in-linux</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">             * \param[out] pscStr String pointer</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">             * \param[in] n Integer</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">             * \param[in] ucBase Radix</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">             * \return Character string pointer</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classn_text_1_1c_string_helper.htm#a8c79afa338b560b81bd85b2d760c010d">   53</a></span>&#160;            <span class="keyword">static</span> <span class="keywordtype">char</span> *<a class="code" href="classn_text_1_1c_string_helper.htm#a8c79afa338b560b81bd85b2d760c010d">fromInt</a>(<span class="keywordtype">char</span> *pscStr, int32_t n, <span class="keyword">const</span> uint8_t ucBase) {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                <span class="keyword">static</span> <span class="keywordtype">char</span> _scASCII[]={ <span class="charliteral">&#39;0&#39;</span>, <span class="charliteral">&#39;1&#39;</span>, <span class="charliteral">&#39;2&#39;</span>, <span class="charliteral">&#39;3&#39;</span>, <span class="charliteral">&#39;4&#39;</span>, <span class="charliteral">&#39;5&#39;</span>, <span class="charliteral">&#39;6&#39;</span>, <span class="charliteral">&#39;7&#39;</span>, <span class="charliteral">&#39;8&#39;</span>, <span class="charliteral">&#39;9&#39;</span>, <span class="charliteral">&#39;a&#39;</span>, <span class="charliteral">&#39;b&#39;</span>, <span class="charliteral">&#39;c&#39;</span>, <span class="charliteral">&#39;d&#39;</span>, <span class="charliteral">&#39;e&#39;</span>, <span class="charliteral">&#39;f&#39;</span> };</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                int32_t i, sign;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="comment">// Record sign</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                <span class="keywordflow">if</span> ((sign = n) &lt; 0) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                    n = -n;        <span class="comment">// abs(n)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                i = 0;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    <span class="comment">// Generate digits in reverse order</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    pscStr[i++] = _scASCII[(n % ucBase) &amp; 15];   <span class="comment">// Get next digit</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                }<span class="keywordflow">while</span> ((n /= ucBase) &gt; 0);    <span class="comment">// Delete it</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">if</span> (sign &lt; 0) {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                    pscStr[i++] = <span class="charliteral">&#39;-&#39;</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                pscStr[i] = <span class="charliteral">&#39;\0&#39;</span>;    <span class="comment">// Null terminator</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classn_text_1_1c_string_helper.htm#ab23ac33bc72c57fac42b0ba7c57fa760">cStringHelper::reverse</a>(pscStr, i);    <span class="comment">// Reverse string to complete</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            } <span class="comment">// fromInt(...)</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">             * String from float (takes a double so slightly misleading)</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">             * source: printFloat for Arduno Maple Mini in core/maple/print.cpp</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">             * Unfortunately its a private method and within a class that would be bloated for my purposes here, hence is a refactored copy</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">             * \param[out] pscStr String pointer</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">             * \param[in] n Integer</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">             * \param[in] digits Number of digits to resolve</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">             * \return Character string pointer</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classn_text_1_1c_string_helper.htm#adf37364e73225e5a0a46089851a90f81">   86</a></span>&#160;            <span class="keyword">static</span> uint8_t <a class="code" href="classn_text_1_1c_string_helper.htm#adf37364e73225e5a0a46089851a90f81">fromFloat</a>(<span class="keywordtype">char</span> *pscStr, <span class="keywordtype">double</span> n, uint8_t digits) {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                uint8_t ucLength=0;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="comment">// Ignore dealing with super large values - we know they wont be in our working system</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="comment">// Handle negative numbers</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">if</span> (n &lt; 0.0) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    pscStr[ucLength++]=<span class="charliteral">&#39;-&#39;</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    n = -n;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                pscStr[ucLength]=<span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="comment">// Simplistic rounding strategy so that e.g. print(1.999, 2)</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="comment">// prints as &quot;2.00&quot;</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keywordtype">double</span> rounding = 0.5;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; digits; i++) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    rounding /= 10.0;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                n += rounding;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="comment">// Extract the integer part of the number and print it</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                uint32_t int_part = (uint32_t)n;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordtype">double</span> remainder = n - int_part;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <a class="code" href="classn_text_1_1c_string_helper.htm#a8c79afa338b560b81bd85b2d760c010d">cStringHelper::fromInt</a>(&amp;pscStr[ucLength], int_part, 10);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                ucLength=strlen(pscStr);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="comment">// Print the decimal point, but only if there are digits beyond</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">if</span> (digits &gt; 0) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    pscStr[ucLength++]=<span class="charliteral">&#39;.&#39;</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    pscStr[ucLength]=<span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="comment">// Extract digits from the remainder one at a time</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">while</span>(digits-- &gt; 0) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    remainder *= 10.0;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    uint32_t to_print = (uint32_t)remainder;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <a class="code" href="classn_text_1_1c_string_helper.htm#a8c79afa338b560b81bd85b2d760c010d">cStringHelper::fromInt</a>(&amp;pscStr[ucLength], to_print, 10);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    ucLength=strlen(pscStr);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    remainder -= to_print;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">return</span> ucLength;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            } <span class="comment">// fromFloat(...)</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }; <span class="comment">// cStringHelper</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;} <span class="comment">// namespace nText</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#endif // stringhelper_h</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassn_text_1_1c_string_helper_htm_a8c79afa338b560b81bd85b2d760c010d"><div class="ttname"><a href="classn_text_1_1c_string_helper.htm#a8c79afa338b560b81bd85b2d760c010d">nText::cStringHelper::fromInt</a></div><div class="ttdeci">static char * fromInt(char *pscStr, int32_t n, const uint8_t ucBase)</div><div class="ttdoc">String from integer, itoa like function.</div><div class="ttdef"><b>Definition:</b> string_helper.h:53</div></div>
<div class="ttc" id="aclassn_text_1_1c_string_helper_htm_adf37364e73225e5a0a46089851a90f81"><div class="ttname"><a href="classn_text_1_1c_string_helper.htm#adf37364e73225e5a0a46089851a90f81">nText::cStringHelper::fromFloat</a></div><div class="ttdeci">static uint8_t fromFloat(char *pscStr, double n, uint8_t digits)</div><div class="ttdoc">String from float (takes a double so slightly misleading) source: printFloat for Arduno Maple Mini in...</div><div class="ttdef"><b>Definition:</b> string_helper.h:86</div></div>
<div class="ttc" id="aclassn_text_1_1c_string_helper_htm"><div class="ttname"><a href="classn_text_1_1c_string_helper.htm">nText::cStringHelper</a></div><div class="ttdoc">A helper class for strings (character arrays).</div><div class="ttdef"><b>Definition:</b> string_helper.h:16</div></div>
<div class="ttc" id="aclassn_text_1_1c_string_helper_htm_ab23ac33bc72c57fac42b0ba7c57fa760"><div class="ttname"><a href="classn_text_1_1c_string_helper.htm#ab23ac33bc72c57fac42b0ba7c57fa760">nText::cStringHelper::reverse</a></div><div class="ttdeci">static char * reverse(char *pscStr, uint8_t ucLength)</div><div class="ttdoc">Reverse character string with known length.</div><div class="ttdef"><b>Definition:</b> string_helper.h:26</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="string__helper_8h.htm">string_helper.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 17:03:14 for ArduinoFRTOSGCPP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
