<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoFRTOSGCPP: nFRTOS::cTask Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoFRTOSGCPP
   &#160;<span id="projectnumber">d91a63f (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classn_f_r_t_o_s_1_1c_task.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classn_f_r_t_o_s_1_1c_task-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">nFRTOS::cTask Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>An abstract class wrapping a single FRTOS task.  
 <a href="classn_f_r_t_o_s_1_1c_task.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="frtos_8h_source.htm">frtos.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a99bba5627bc1b7eb2fe103998a9c0e9c"><td class="memItemLeft" align="right" valign="top"><a id="a99bba5627bc1b7eb2fe103998a9c0e9c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a99bba5627bc1b7eb2fe103998a9c0e9c">cTask</a> ()</td></tr>
<tr class="memdesc:a99bba5627bc1b7eb2fe103998a9c0e9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, nake stable instance. <br /></td></tr>
<tr class="separator:a99bba5627bc1b7eb2fe103998a9c0e9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace84938f79339c8102e736e0d1930bad"><td class="memItemLeft" align="right" valign="top">TaskHandle_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#ace84938f79339c8102e736e0d1930bad">getHandle</a> ()</td></tr>
<tr class="memdesc:ace84938f79339c8102e736e0d1930bad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get FRTOS task handle or NULL.  <a href="classn_f_r_t_o_s_1_1c_task.htm#ace84938f79339c8102e736e0d1930bad">More...</a><br /></td></tr>
<tr class="separator:ace84938f79339c8102e736e0d1930bad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e91aca895cfbabf02d106294c8cc8ce"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a> () const</td></tr>
<tr class="memdesc:a4e91aca895cfbabf02d106294c8cc8ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test FRTOS task handle.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">More...</a><br /></td></tr>
<tr class="separator:a4e91aca895cfbabf02d106294c8cc8ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75ccedd63e259e8d3b4075d934932946"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a75ccedd63e259e8d3b4075d934932946">isRunning</a> ()</td></tr>
<tr class="memdesc:a75ccedd63e259e8d3b4075d934932946"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get FRTOS task running state.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a75ccedd63e259e8d3b4075d934932946">More...</a><br /></td></tr>
<tr class="separator:a75ccedd63e259e8d3b4075d934932946"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb94892cbcb0c55842d9266eb9e22f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a6bb94892cbcb0c55842d9266eb9e22f7">suspend</a> (const TaskHandle_t xTHandleSpecific=NULL) const</td></tr>
<tr class="memdesc:a6bb94892cbcb0c55842d9266eb9e22f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Suspend task.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a6bb94892cbcb0c55842d9266eb9e22f7">More...</a><br /></td></tr>
<tr class="separator:a6bb94892cbcb0c55842d9266eb9e22f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a026ab6cbf3517b5064e0b48dfc48b2be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a026ab6cbf3517b5064e0b48dfc48b2be">resume</a> (const TaskHandle_t xTHandleSpecific=NULL) const</td></tr>
<tr class="memdesc:a026ab6cbf3517b5064e0b48dfc48b2be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resume task.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a026ab6cbf3517b5064e0b48dfc48b2be">More...</a><br /></td></tr>
<tr class="separator:a026ab6cbf3517b5064e0b48dfc48b2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a402ca47e8e43b64e6157a17cd81d9ff5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a> (const char *pcTaskName, const UBaseType_t ulPriority, const uint32_t ulStackSize=configMINIMAL_STACK_SIZE)</td></tr>
<tr class="memdesc:a402ca47e8e43b64e6157a17cd81d9ff5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create task and start running.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">More...</a><br /></td></tr>
<tr class="separator:a402ca47e8e43b64e6157a17cd81d9ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a773e388a901e20cb124e894dab28aba9"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a773e388a901e20cb124e894dab28aba9">join</a> (const UBaseType_t ulPriority=tskIDLE_PRIORITY+1, const uint32_t ulStackSize=configMINIMAL_STACK_SIZE)=0</td></tr>
<tr class="memdesc:a773e388a901e20cb124e894dab28aba9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create task and start running via <a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a>.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a773e388a901e20cb124e894dab28aba9">More...</a><br /></td></tr>
<tr class="separator:a773e388a901e20cb124e894dab28aba9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80ef40a1ef27e6fdd396c87834c55f9d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d">run</a> ()=0</td></tr>
<tr class="memdesc:a80ef40a1ef27e6fdd396c87834c55f9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Task main loop, implementation should be a non-returning endless loop in most cases.  <a href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d">More...</a><br /></td></tr>
<tr class="separator:a80ef40a1ef27e6fdd396c87834c55f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:adc8aba53fc26c438dabb447961cdb49c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#adc8aba53fc26c438dabb447961cdb49c">taskHandler</a> (void *pvParameters)</td></tr>
<tr class="memdesc:adc8aba53fc26c438dabb447961cdb49c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Task callback handler, invokes user defined.  <a href="classn_f_r_t_o_s_1_1c_task.htm#adc8aba53fc26c438dabb447961cdb49c">More...</a><br /></td></tr>
<tr class="separator:adc8aba53fc26c438dabb447961cdb49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a288064cacde495b20a32d4c29e47cfa4"><td class="memItemLeft" align="right" valign="top"><a id="a288064cacde495b20a32d4c29e47cfa4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>_bRunning</b></td></tr>
<tr class="separator:a288064cacde495b20a32d4c29e47cfa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ecdb5d8115f8a27c85850bbfa872463"><td class="memItemLeft" align="right" valign="top"><a id="a5ecdb5d8115f8a27c85850bbfa872463"></a>
TaskHandle_t&#160;</td><td class="memItemRight" valign="bottom"><b>_xTHandle</b></td></tr>
<tr class="separator:a5ecdb5d8115f8a27c85850bbfa872463"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An abstract class wrapping a single FRTOS task. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="blinky_8ino-example.htm#_a0">blinky.ino</a>.</dd>
</dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ace84938f79339c8102e736e0d1930bad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace84938f79339c8102e736e0d1930bad">&#9670;&nbsp;</a></span>getHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TaskHandle_t nFRTOS::cTask::getHandle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get FRTOS task handle or NULL. </p>
<p><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a> for details</p>
<dl class="section return"><dt>Returns</dt><dd>TaskHandle_t </dd></dl>

</div>
</div>
<a id="a75ccedd63e259e8d3b4075d934932946"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75ccedd63e259e8d3b4075d934932946">&#9670;&nbsp;</a></span>isRunning()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool nFRTOS::cTask::isRunning </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get FRTOS task running state. </p>
<dl class="section return"><dt>Returns</dt><dd>Running state </dd></dl>

</div>
</div>
<a id="a4e91aca895cfbabf02d106294c8cc8ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e91aca895cfbabf02d106294c8cc8ce">&#9670;&nbsp;</a></span>isValidHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool nFRTOS::cTask::isValidHandle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Test FRTOS task handle. </p>
<dl class="section return"><dt>Returns</dt><dd>Valid state </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="blinky_8ino-example.htm#a3">blinky.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a773e388a901e20cb124e894dab28aba9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a773e388a901e20cb124e894dab28aba9">&#9670;&nbsp;</a></span>join()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool nFRTOS::cTask::join </td>
          <td>(</td>
          <td class="paramtype">const UBaseType_t&#160;</td>
          <td class="paramname"><em>ulPriority</em> = <code>tskIDLE_PRIORITY+1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>ulStackSize</em> = <code>configMINIMAL_STACK_SIZE</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create task and start running via <a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a>. </p>
<p>Likely create other FRTOS elements as required by implementing class</p>
<dl class="section note"><dt>Note</dt><dd>Pre-condition, internally invoke <a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a402ca47e8e43b64e6157a17cd81d9ff5">start</a> and make public for users</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ulPriority</td><td>Task priority level. Default tskIDLE_PRIORITY + 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ulStackSize</td><td>Stack size in Bytes, default configMINIMAL_STACK_SIZE </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Overall state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Join successful </td></tr>
    <tr><td class="paramname">false</td><td>Join failed, one or more problems caused failure </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#adf139a67992602e9c4ebe8411312b5b0">nFRTOSPeripheral::cUARTTX&lt; N &gt;</a>, and <a class="el" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a6f06e415136d5a6a6f035fd9699e7f16">nFRTOSPeripheral::cUARTRX&lt; N &gt;</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="blinky_8ino-example.htm#a1">blinky.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a026ab6cbf3517b5064e0b48dfc48b2be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a026ab6cbf3517b5064e0b48dfc48b2be">&#9670;&nbsp;</a></span>resume()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void nFRTOS::cTask::resume </td>
          <td>(</td>
          <td class="paramtype">const TaskHandle_t&#160;</td>
          <td class="paramname"><em>xTHandleSpecific</em> = <code>NULL</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Resume task. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">xTHandleSpecific</td><td>Task hande, default NULL = this task </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a80ef40a1ef27e6fdd396c87834c55f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80ef40a1ef27e6fdd396c87834c55f9d">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void nFRTOS::cTask::run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Task main loop, implementation should be a non-returning endless loop in most cases. </p>
<dl class="section note"><dt>Note</dt><dd>Keep protected or lower to private </dd></dl>

<p>Implemented in <a class="el" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_t_x.htm#a10d74924e9ce23d35c49fa73f21744dd">nFRTOSPeripheral::cUARTTX&lt; N &gt;</a>, and <a class="el" href="classn_f_r_t_o_s_peripheral_1_1c_u_a_r_t_r_x.htm#a832efef279b75b3ab96127ec27f9d34b">nFRTOSPeripheral::cUARTRX&lt; N &gt;</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="blinky_8ino-example.htm#a4">blinky.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a402ca47e8e43b64e6157a17cd81d9ff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a402ca47e8e43b64e6157a17cd81d9ff5">&#9670;&nbsp;</a></span>start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void nFRTOS::cTask::start </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pcTaskName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const UBaseType_t&#160;</td>
          <td class="paramname"><em>ulPriority</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>ulStackSize</em> = <code>configMINIMAL_STACK_SIZE</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create task and start running. </p>
<dl class="section note"><dt>Note</dt><dd>Running state will not change until </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d" title="Task main loop, implementation should be a non-returning endless loop in most cases.">run()</a> invoked </dd></dl>
<dl class="section note"><dt>Note</dt><dd>Use <a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a4e91aca895cfbabf02d106294c8cc8ce">isValidHandle</a> to determine success of task creation </dd></dl>
<dl class="section attention"><dt>Attention</dt><dd>Invoke from </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a773e388a901e20cb124e894dab28aba9" title="Create task and start running via start.">join()</a> implementation</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pcTaskName</td><td>Pointer to character string for task name (null terminated). Can be NULL pointer if no string desired </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ulPriority</td><td>Task priority </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ulStackSize</td><td>Stack size in Bytes, default configMINIMAL_STACK_SIZE </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="blinky_8ino-example.htm#a2">blinky.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a6bb94892cbcb0c55842d9266eb9e22f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb94892cbcb0c55842d9266eb9e22f7">&#9670;&nbsp;</a></span>suspend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void nFRTOS::cTask::suspend </td>
          <td>(</td>
          <td class="paramtype">const TaskHandle_t&#160;</td>
          <td class="paramname"><em>xTHandleSpecific</em> = <code>NULL</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Suspend task. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">xTHandleSpecific</td><td>Task hande, default NULL = this task </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adc8aba53fc26c438dabb447961cdb49c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc8aba53fc26c438dabb447961cdb49c">&#9670;&nbsp;</a></span>taskHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void nFRTOS::cTask::taskHandler </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pvParameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Task callback handler, invokes user defined. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm#a80ef40a1ef27e6fdd396c87834c55f9d" title="Task main loop, implementation should be a non-returning endless loop in most cases.">run()</a> method</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pvParameters</td><td>Pointer to this instance </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>nFRTOS</b></li><li class="navelem"><a class="el" href="classn_f_r_t_o_s_1_1c_task.htm">cTask</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 17:03:14 for ArduinoFRTOSGCPP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
