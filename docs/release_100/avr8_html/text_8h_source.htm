<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoFRTOSGCPP: text.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoFRTOSGCPP
   &#160;<span id="projectnumber">d91a63f (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('text_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">text.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="text_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Simple text handling helper classes</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * \todo    Refactor with Arduino streams</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * PROJECT            : FRTOS GCPP</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * TARGET SYSTEM    : Arduino, Maple Mini</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#ifndef text_h</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define text_h</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span>nText {<span class="comment"></span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">     * A class to represent a text line string</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">     * \todo Refactor as std::string with fixed size unit allocation</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">     * \tparam N Text line length (characters, including NULL)</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">template</span> &lt;u<span class="keywordtype">int</span>16_t N&gt;</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm">   21</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classn_text_1_1c_text_line.htm">cTextLine</a> {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">             * Default constructor, make stable instance</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm#ac06fa1b41864c5503de41e14d2c9e463">   26</a></span>&#160;            <a class="code" href="classn_text_1_1c_text_line.htm#ac06fa1b41864c5503de41e14d2c9e463">cTextLine</a>() : _ucLength(N) { }</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">             * Null terminated string constructor</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">             * \note Source string will be truncated as required</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">             * \param[in] pcsData Pointer to source NULL terminated character string</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm#a0c684eafb625c49671d7ff25dc40d09f">   35</a></span>&#160;            <a class="code" href="classn_text_1_1c_text_line.htm#a0c684eafb625c49671d7ff25dc40d09f">cTextLine</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *pcsData) {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                <a class="code" href="classn_text_1_1c_text_line.htm#a8ddfae0d79871df7faa9bfb571de389b">setLine</a>(pcsData, strlen(pcsData));</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">             * Null terminated string, text line constructor</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">             * \note Source string will be truncated as required</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">             * \param[in] pcsData Pointer to source NULL terminated character string</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">             * \param[in] ucLength Length of character string</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm#a83d96e27787bfd2cdaf261c5099e96bd">   47</a></span>&#160;            <a class="code" href="classn_text_1_1c_text_line.htm#a83d96e27787bfd2cdaf261c5099e96bd">cTextLine</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *pcsData, <span class="keyword">const</span> uint8_t ucLength) {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <a class="code" href="classn_text_1_1c_text_line.htm#a8ddfae0d79871df7faa9bfb571de389b">setLine</a>(pcsData, ucLength);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            }</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">             * Set string text line</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">             * \param pcsData Pointer to source character string</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">             * \param ucLength length of character string</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm#a8ddfae0d79871df7faa9bfb571de389b">   58</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classn_text_1_1c_text_line.htm#a8ddfae0d79871df7faa9bfb571de389b">setLine</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *pcsData, <span class="keyword">const</span> uint8_t ucLength) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordflow">if</span> (ucLength&gt;N-1) {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    _ucLength=N-1;    <span class="comment">// deal with including a NULL</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                    _ucLength=ucLength;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">for</span>(uint8_t ucI=0;ucI&lt;_ucLength;ucI++) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    _scLine[ucI]=pcsData[ucI];</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="comment">// last character NULL terminator?</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keywordflow">if</span> (_scLine[_ucLength-1]!=0x00) {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                    <span class="comment">// no so install NULL, dont increase buffer length as it is not o/p, only set so system functions like printf(&quot;%s&quot;, ...) via getLine(...) work</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    _scLine[_ucLength]=0x00;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">             * Get pointer to null terminated string</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">             * \todo Refactor with copy rather than exposing internal string</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">             * \attention Only valid when \ref getLineLength &gt;0</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">             * \return Pointer to null terminated line string</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">   82</a></span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">getLine</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keywordflow">return</span> _scLine;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">             * Get line string length in characters</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">             * \return Characters N (not including NULL terminator, will include other control characters like newline or carriage return)</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classn_text_1_1c_text_line.htm#afa6174b97e988c0ddd96e48533486aa1">   92</a></span>&#160;            uint8_t <a class="code" href="classn_text_1_1c_text_line.htm#afa6174b97e988c0ddd96e48533486aa1">getLineLength</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">return</span> _ucLength;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordtype">char</span>                _scLine[N+1];</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            uint8_t             _ucLength;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }; <span class="comment">// class cTextLine</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     * Class to aid device specific text line i/o</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * \tparam N Text line length (characters, including NULL)</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">template</span> &lt;u<span class="keywordtype">int</span>16_t N&gt;</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classn_text_1_1c_texter.htm">  108</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classn_text_1_1c_texter.htm">cTexter</a> : <span class="keyword">public</span> <a class="code" href="classn_text_1_1c_text_line.htm">cTextLine</a>&lt;N&gt; {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <a class="code" href="classn_text_1_1c_texter.htm">cTexter</a>() : <a class="code" href="classn_text_1_1c_text_line.htm">cTextLine&lt;N&gt;</a>() { }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">             * Character read delay</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classn_text_1_1c_texter.htm#af6c418910b7dacf72c85366d25cffd37">characterReadDelay</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">             * Character read</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">             *    \return Read status.  Determine if pscChar is valid or not</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classn_text_1_1c_texter.htm#acd115f8c02b9fe876a18cef358e4ccd8">characterRead</a>(<span class="keywordtype">char</span> *pscChar) = 0;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">             * Character write</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classn_text_1_1c_texter.htm#a2f64a010709678015a16cbf2645c2343">characterWrite</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> scChar) = 0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">             * Blocking read line as character string from given \ref cTexter instance</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">             * \note Assumes a line string is terminated by &quot;\r\n&quot; character combo</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">             * \param pxThis Instance of CTexter (data source)</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">             * \param pscData Data buffer to store characters</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classn_text_1_1c_texter.htm#acdbe1b7591ff8813f6d2806e17a1e4d0">  141</a></span>&#160;            <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classn_text_1_1c_texter.htm#acdbe1b7591ff8813f6d2806e17a1e4d0">blockingReadLine</a>(<a class="code" href="classn_text_1_1c_texter.htm">cTexter&lt;N&gt;</a> *pxThis, <span class="keywordtype">char</span> *pscData) {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordtype">char</span>    scLast=0,scCurrent;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                uint8_t    ucLength=0;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">while</span>(1) {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    <span class="keywordflow">if</span> (pxThis-&gt;<a class="code" href="classn_text_1_1c_texter.htm#acd115f8c02b9fe876a18cef358e4ccd8">characterRead</a>(&amp;scCurrent)) {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        <span class="keywordflow">if</span> (ucLength&gt;=N) {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            ucLength=0;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        pscData[ucLength++]=scCurrent;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        <span class="keywordflow">if</span> (scCurrent==<span class="charliteral">&#39;\n&#39;</span> &amp;&amp; scLast==<span class="charliteral">&#39;\r&#39;</span>) {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                            <span class="keywordflow">if</span> (ucLength&gt;1) {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                pscData[ucLength]=0;    <span class="comment">// install null terminator and we&#39;re done...</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                pxThis-&gt;_ucLength=ucLength;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        scLast=scCurrent;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    pxThis-&gt;<a class="code" href="classn_text_1_1c_texter.htm#af6c418910b7dacf72c85366d25cffd37">characterReadDelay</a>();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">            /**</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">             * Blocking write line as character string, NULL terminated</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">             *</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">             * \note Assumes a line string includes &quot;\r\n&quot; termination characters and finishes output on NULL character or ucMaxLength</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">             * \param pxThis Instance of CTexter (data destination)</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">             * \param pscData Data buffer of source characters</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classn_text_1_1c_texter.htm#a94193e580b587f3de34d45b72dc6fba9">  178</a></span>&#160;            <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classn_text_1_1c_texter.htm#a94193e580b587f3de34d45b72dc6fba9">blockingWriteLine</a>(<a class="code" href="classn_text_1_1c_texter.htm">cTexter&lt;N&gt;</a> *pxThis, <span class="keyword">const</span> <span class="keywordtype">char</span> *pscData) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordtype">char</span>    ucLength=0,scCurrent;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">while</span>(1) {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    scCurrent=pscData[ucLength++];</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">if</span> (scCurrent==0x00) {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    pxThis-&gt;<a class="code" href="classn_text_1_1c_texter.htm#a2f64a010709678015a16cbf2645c2343">characterWrite</a>(scCurrent);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keywordflow">if</span> (ucLength&gt;=N) {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }; <span class="comment">// class cTexter</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;} <span class="comment">// namespace nText</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#endif // text_h</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_a0c684eafb625c49671d7ff25dc40d09f"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#a0c684eafb625c49671d7ff25dc40d09f">nText::cTextLine::cTextLine</a></div><div class="ttdeci">cTextLine(const char *pcsData)</div><div class="ttdoc">Null terminated string constructor.</div><div class="ttdef"><b>Definition:</b> text.h:35</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm_a2f64a010709678015a16cbf2645c2343"><div class="ttname"><a href="classn_text_1_1c_texter.htm#a2f64a010709678015a16cbf2645c2343">nText::cTexter::characterWrite</a></div><div class="ttdeci">virtual void characterWrite(const char scChar)=0</div><div class="ttdoc">Character write.</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_afa6174b97e988c0ddd96e48533486aa1"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#afa6174b97e988c0ddd96e48533486aa1">nText::cTextLine::getLineLength</a></div><div class="ttdeci">uint8_t getLineLength() const</div><div class="ttdoc">Get line string length in characters.</div><div class="ttdef"><b>Definition:</b> text.h:92</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_ac06fa1b41864c5503de41e14d2c9e463"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#ac06fa1b41864c5503de41e14d2c9e463">nText::cTextLine::cTextLine</a></div><div class="ttdeci">cTextLine()</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> text.h:26</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_a3bf0f7b47b83065c0e006d08e592197e"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#a3bf0f7b47b83065c0e006d08e592197e">nText::cTextLine::getLine</a></div><div class="ttdeci">const char * getLine() const</div><div class="ttdoc">Get pointer to null terminated string.</div><div class="ttdef"><b>Definition:</b> text.h:82</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_a83d96e27787bfd2cdaf261c5099e96bd"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#a83d96e27787bfd2cdaf261c5099e96bd">nText::cTextLine::cTextLine</a></div><div class="ttdeci">cTextLine(const char *pcsData, const uint8_t ucLength)</div><div class="ttdoc">Null terminated string, text line constructor.</div><div class="ttdef"><b>Definition:</b> text.h:47</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm_af6c418910b7dacf72c85366d25cffd37"><div class="ttname"><a href="classn_text_1_1c_texter.htm#af6c418910b7dacf72c85366d25cffd37">nText::cTexter::characterReadDelay</a></div><div class="ttdeci">virtual void characterReadDelay() const =0</div><div class="ttdoc">Character read delay.</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm"><div class="ttname"><a href="classn_text_1_1c_text_line.htm">nText::cTextLine</a></div><div class="ttdoc">A class to represent a text line string.</div><div class="ttdef"><b>Definition:</b> text.h:21</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm"><div class="ttname"><a href="classn_text_1_1c_texter.htm">nText::cTexter</a></div><div class="ttdoc">Class to aid device specific text line i/o.</div><div class="ttdef"><b>Definition:</b> text.h:108</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm_a94193e580b587f3de34d45b72dc6fba9"><div class="ttname"><a href="classn_text_1_1c_texter.htm#a94193e580b587f3de34d45b72dc6fba9">nText::cTexter::blockingWriteLine</a></div><div class="ttdeci">static void blockingWriteLine(cTexter&lt; N &gt; *pxThis, const char *pscData)</div><div class="ttdoc">Blocking write line as character string, NULL terminated.</div><div class="ttdef"><b>Definition:</b> text.h:178</div></div>
<div class="ttc" id="aclassn_text_1_1c_text_line_htm_a8ddfae0d79871df7faa9bfb571de389b"><div class="ttname"><a href="classn_text_1_1c_text_line.htm#a8ddfae0d79871df7faa9bfb571de389b">nText::cTextLine::setLine</a></div><div class="ttdeci">void setLine(const char *pcsData, const uint8_t ucLength)</div><div class="ttdoc">Set string text line.</div><div class="ttdef"><b>Definition:</b> text.h:58</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm_acd115f8c02b9fe876a18cef358e4ccd8"><div class="ttname"><a href="classn_text_1_1c_texter.htm#acd115f8c02b9fe876a18cef358e4ccd8">nText::cTexter::characterRead</a></div><div class="ttdeci">virtual bool characterRead(char *pscChar)=0</div><div class="ttdoc">Character read.</div></div>
<div class="ttc" id="aclassn_text_1_1c_texter_htm_acdbe1b7591ff8813f6d2806e17a1e4d0"><div class="ttname"><a href="classn_text_1_1c_texter.htm#acdbe1b7591ff8813f6d2806e17a1e4d0">nText::cTexter::blockingReadLine</a></div><div class="ttdeci">static void blockingReadLine(cTexter&lt; N &gt; *pxThis, char *pscData)</div><div class="ttdoc">Blocking read line as character string from given cTexter instance.</div><div class="ttdef"><b>Definition:</b> text.h:141</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="text_8h.htm">text.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 17:03:14 for ArduinoFRTOSGCPP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
